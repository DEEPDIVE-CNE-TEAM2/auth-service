name: Build Auth image and push to ECR (push latest + sha)

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_IMAGE_NAME: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com/auth-service
  GRADLE_VERSION: 7.6
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Print repo files (debug)
        run: |
          echo "PWD=$(pwd)"
          ls -la
          ls -la gradle || true
          ls -la gradle/wrapper || true
          cat .dockerignore || true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install pinned Gradle (non-interactive) and expose to PATH
        run: |
          set -euo pipefail
          echo "Installing Gradle ${GRADLE_VERSION} to /opt (non-interactive)"
          sudo apt-get update -y
          sudo apt-get install -y curl unzip jq
          DIST="gradle-${GRADLE_VERSION}-bin.zip"
          URL="https://services.gradle.org/distributions/${DIST}"
          wget -q "$URL" -O /tmp/gradle.zip
          sudo unzip -o -q /tmp/gradle.zip -d /opt
          sudo ln -sfn "/opt/gradle-${GRADLE_VERSION}" /opt/gradle
          echo "/opt/gradle/bin" >> $GITHUB_PATH
          echo "Gradle installed: $(/opt/gradle/bin/gradle -v | head -n 1)"

      - name: (optional) Generate gradle wrapper if missing
        run: |
          set -euo pipefail
          if [ -f gradle/wrapper/gradle-wrapper.jar ]; then
            echo "gradle-wrapper.jar present, skipping wrapper generation"
          else
            /opt/gradle/bin/gradle wrapper || true
          fi

      - name: Build JAR on runner using pinned Gradle
        run: |
          set -euo pipefail
          /opt/gradle/bin/gradle --no-daemon clean bootJar -x test --warning-mode all
          ls -la build/libs || true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build Docker image and push tags
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          SHORT=${SHORT_SHA::7}
          LATEST_TAG=${ECR_IMAGE_NAME}:latest
          SHA_TAG=${ECR_IMAGE_NAME}:${SHORT}
          docker build -t ${SHA_TAG} .
          docker tag ${SHA_TAG} ${LATEST_TAG}
          docker push ${SHA_TAG}
          docker push ${LATEST_TAG}
          echo "IMAGE_LATEST=${LATEST_TAG}" >> $GITHUB_ENV
          echo "IMAGE_SHA=${SHA_TAG}" >> $GITHUB_ENV

      - name: Trigger ArgoCD sync via CLI (sanitized server, no --retry)
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          set -eu
          echo "---- ArgoCD CLI sync (sanitized server, no --retry) ----"

          if [ -z "${ARGOCD_SERVER:-}" ]; then
            echo "ERROR: ARGOCD_SERVER is empty"
            exit 2
          fi
          if [ -z "${ARGOCD_TOKEN:-}" ]; then
            echo "ERROR: ARGOCD_TOKEN is empty"
            exit 3
          fi

          # sanitize server: remove leading http(s):// and trailing slash
          HOST="${ARGOCD_SERVER#https://}"
          HOST="${HOST#http://}"
          HOST="${HOST%/}"
          echo "Using ArgoCD host: $HOST"

          # 1) download argocd CLI
          curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o ./argocd
          chmod +x ./argocd

          # 2) client version
          ./argocd version --client || true

          # 3) check token -> account info (diagnostic). don't exit if this fails
          echo "---- account get-user-info (diagnostic) ----"
          set +e
          ./argocd --server "$HOST" --auth-token "$ARGOCD_TOKEN" account get-user-info -o json
          rc_userinfo=$?
          set -e
          if [ $rc_userinfo -ne 0 ]; then
            echo "Warning: account get-user-info failed (token may lack read permissions or host unreachable)."
          else
            echo "account get-user-info succeeded."
          fi

          # 3.5) check app exists and show its status (diagnostic)
          echo "---- argocd app get auth (diagnostic) ----"
          set +e
          ./argocd --server "$HOST" --auth-token "$ARGOCD_TOKEN" app get auth -o yaml
          rc_appget=$?
          set -e
          if [ $rc_appget -ne 0 ]; then
            echo "Warning: app 'auth' not found or access denied (rc=$rc_appget)."
            # continue to attempt sync anyway; will fail if not permitted
          else
            echo "app 'auth' found."
          fi

          # 4) sync without --retry (some CLI versions don't support --retry)
          echo "---- syncing app 'auth' ----"
          # Use --insecure if your ArgoCD has self-signed certs / LB
          ./argocd --server "$HOST" --auth-token "$ARGOCD_TOKEN" --insecure --grpc-web \
            app sync auth --prune --force --wait --timeout 300


      - name: Cleanup local images
        run: docker image prune -af || true

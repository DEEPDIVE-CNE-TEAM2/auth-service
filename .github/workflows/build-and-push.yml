name: Build Auth image and push to ECR (push latest + sha)

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_IMAGE_NAME: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com/auth-service
  GRADLE_VERSION: 7.6 #.

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Print repo files (debug)
        run: |
          echo "PWD=$(pwd)"
          ls -la
          ls -la gradle || true
          ls -la gradle/wrapper || true
          cat .dockerignore || true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install pinned Gradle (non-interactive) and expose to PATH
        run: |
          set -euo pipefail
          echo "Installing Gradle ${GRADLE_VERSION} to /opt (non-interactive)"
          sudo apt-get update -y
          sudo apt-get install -y curl unzip jq
          DIST="gradle-${GRADLE_VERSION}-bin.zip"
          URL="https://services.gradle.org/distributions/${DIST}"
          wget -q "$URL" -O /tmp/gradle.zip
          sudo unzip -o -q /tmp/gradle.zip -d /opt
          sudo ln -sfn "/opt/gradle-${GRADLE_VERSION}" /opt/gradle
          echo "/opt/gradle/bin" >> $GITHUB_PATH
          echo "Gradle installed: $(/opt/gradle/bin/gradle -v | head -n 1)"

      - name: (optional) Generate gradle wrapper if missing
        run: |
          set -euo pipefail
          if [ -f gradle/wrapper/gradle-wrapper.jar ]; then
            echo "gradle-wrapper.jar present, skipping wrapper generation"
          else
            /opt/gradle/bin/gradle wrapper || true
          fi

      - name: Build JAR on runner using pinned Gradle
        run: |
          set -euo pipefail
          /opt/gradle/bin/gradle --no-daemon clean bootJar -x test --warning-mode all
          ls -la build/libs || true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build Docker image and push tags
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          SHORT=${SHORT_SHA::7}
          LATEST_TAG=${ECR_IMAGE_NAME}:latest
          SHA_TAG=${ECR_IMAGE_NAME}:${SHORT}
          docker build -t ${SHA_TAG} .
          docker tag ${SHA_TAG} ${LATEST_TAG}
          docker push ${SHA_TAG}
          docker push ${LATEST_TAG}
          echo "IMAGE_LATEST=${LATEST_TAG}" >> $GITHUB_ENV
          echo "IMAGE_SHA=${SHA_TAG}" >> $GITHUB_ENV

      - name: Trigger ArgoCD sync via CLI (sanitized host, short poll, --insecure)
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          set -euo pipefail
          echo "---- ArgoCD CLI sync (sanitized host, short poll) ----"

          if [ -z "${ARGOCD_SERVER:-}" ]; then
            echo "ERROR: ARGOCD_SERVER is empty"
            exit 2
          fi

          HOST="${ARGOCD_SERVER#https://}"
          HOST="${HOST#http://}"
          HOST="${HOST%/}"
          echo "Using ArgoCD host: $HOST"

          curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o ./argocd
          chmod +x ./argocd
          ./argocd version --client || true

          TOKEN=""
          if [ -n "${ARGOCD_TOKEN:-}" ]; then
            TOKEN="${ARGOCD_TOKEN}"
            echo "Using ARGOCD_TOKEN from secrets (length=$(echo -n \"$TOKEN\" | wc -c))"
          fi

          run_argocd() {
            if [ -n "$TOKEN" ]; then
              eval ./argocd --server "$HOST" --insecure --grpc-web --auth-token \"$TOKEN\" "$@"
            else
              ./argocd --server "$HOST" --insecure --grpc-web "$@"
            fi
          }

          echo "---- account get-user-info (diagnostic) ----"
          set +e
          run_argocd account get-user-info -o json
          rc_userinfo=$?
          set -e
          if [ $rc_userinfo -ne 0 ]; then
            echo "Warning: account get-user-info failed (token/session may lack read permissions). rc=$rc_userinfo"
          else
            echo "account get-user-info succeeded."
          fi

          echo "---- app get auth (diagnostic) ----"
          set +e
          run_argocd app get auth -o json
          rc_appget=$?
          set -e
          if [ $rc_appget -ne 0 ]; then
            echo "Warning: app 'auth' not found or access denied (rc=$rc_appget)."
          else
            echo "app 'auth' found."
          fi

          echo "---- issuing app sync auth (no wait) ----"
          set +e
          run_argocd app sync auth --prune --force
          rc_sync=$?
          set -e
          echo "app sync exit code: $rc_sync"

          if [ $rc_sync -ne 0 ]; then
            echo "app sync returned non-zero (rc=$rc_sync). Likely permission issue."
            # quick status fetch once and bail fast
            set +e
            status_json=$( run_argocd app get auth -o json 2>/dev/null || true )
            set -e
            echo "Last known status:"
            echo "$status_json" | jq . || true
            echo "ERROR: sync failed. If you see 'permission denied' in earlier logs, grant 'applications sync' to this account/token."
            exit 5
          fi

          # short poll: try a few times (reduced from 30)
          echo "---- short polling app status (max 3 tries) ----"
          tries=3
          sleep_sec=4
          ok=0
          for i in $(seq 1 $tries); do
            sleep $sleep_sec
            set +e
            status_json=$( run_argocd app get auth -o json 2>/dev/null || true )
            rc_status=$?
            set -e
            if [ $rc_status -ne 0 ]; then
              echo "Attempt $i/$tries: cannot get app status (rc=$rc_status)."
              continue
            fi
            phase=$(echo "$status_json" | jq -r '.status.operationState.phase // empty' 2>/dev/null || true)
            syncstatus=$(echo "$status_json" | jq -r '.status.sync.status // empty' 2>/dev/null || true)
            echo "Attempt $i/$tries: operationState.phase='$phase' sync.status='$syncstatus'"
            if [ "$phase" = "Succeeded" ] || [ "$syncstatus" = "Synced" ]; then
              echo "ArgoCD app is synced/succeeded."
              ok=1
              break
            fi
          done

          if [ $ok -ne 1 ]; then
            echo "App did not reach Synced/Succeeded within short timeout or encountered error."
            echo "Last status JSON:"
            echo "$status_json" | jq . || true
            exit 5
          fi

          echo "ArgoCD sync finished successfully."


      - name: Cleanup local images
        run: docker image prune -af || true

name: Build Auth image and push to ECR (push sha -> update infra manifest)

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_IMAGE_NAME: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com/auth-service
  GRADLE_VERSION: 7.6

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # ... (생략: build / gradle / jar steps 그대로 유지) ...

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build Docker image and push tags
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          SHORT=${SHORT_SHA::7}
          SHA_TAG=${ECR_IMAGE_NAME}:${SHORT}

          # 빌드 + 태그(sha 태그 사용)
          docker build -t ${SHA_TAG} .
          docker push ${SHA_TAG}

          # 환경에 저장 (아래 단계에서 사용)
          echo "IMAGE_SHA=${SHA_TAG}" >> $GITHUB_ENV
          echo "IMAGE_SHORT=${SHORT}" >> $GITHUB_ENV

      # -------------------------
      # 추가: infra 레포의 k8s/auth/auth-all.yml 업데이트
      # -------------------------
      - name: Update infra k8s manifest (auth image -> sha tag) and push
        env:
          IMAGE_SHA: ${{ env.IMAGE_SHA }}
          IMAGE_SHORT: ${{ env.IMAGE_SHORT }}
        run: |
          set -euo pipefail
          echo "Will update infra repo to use image: ${IMAGE_SHA}"

          # 설정: infra 레포와 파일 경로
          INFRA_REPO="https://x-access-token:${{ secrets.PAT }}@github.com/DEEPDIVE-CNE-TEAM2/moyeorak-infra.git"
          INFRA_DIR="infra"
          MANIFEST_PATH="k8s/auth/auth-all.yml"   # 변경할 파일 경로
          BRANCH="main"

          # 클론 (깊이 1)
          git clone --depth=1 "${INFRA_REPO}" "${INFRA_DIR}"
          cd "${INFRA_DIR}"
          git checkout "${BRANCH}" || true

          # yq 설치 (없으면 설치)
          if ! command -v yq >/dev/null 2>&1; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi

          # 안전 검사: 파일 존재 확인
          if [ ! -f "${MANIFEST_PATH}" ]; then
            echo "ERROR: manifest not found at ${MANIFEST_PATH}"
            ls -la
            exit 1
          fi

          # 업데이트: 컨테이너 이름이 auth-service 이므로 select 문사용
          # (auth-all.yml의 컨테이너 이름에 따라 'select(.name=="auth-service")' 를 맞춰주세요)
          NEW_IMAGE="${IMAGE_SHA}"
          echo "Updating ${MANIFEST_PATH} -> ${NEW_IMAGE}"

          yq eval -i '(.spec.template.spec.containers[] | select(.name=="auth-service") .image) = strenv(NEW_IMAGE)' "${MANIFEST_PATH}"

          # 변경 내용 커밋 & push (없으면 'No changes' 메시지)
          git config user.email "github-actions@github.com"
          git config user.name "github-actions"
          if git diff --quiet -- "${MANIFEST_PATH}"; then
            echo "No changes to commit"
          else
            git add "${MANIFEST_PATH}"
            git commit -m "ci: update auth-service image -> ${NEW_IMAGE}"
            # push (토큰 사용된 URL로 push)
            git push "${INFRA_REPO}" "${BRANCH}"
            echo "Pushed manifest update to infra repo."
          fi

      - name: Trigger ArgoCD sync via CLI (root app)
        env:
            ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
            ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
            ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
            set -euo pipefail
            echo "---- ArgoCD CLI sync with root app ----"
            HOST="${ARGOCD_SERVER#https://}"
            HOST="${HOST#http://}"
            HOST="${HOST%/}"
            echo "Using ArgoCD host: $HOST"

            curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o ./argocd
            chmod +x ./argocd
            ./argocd version --client || true

            ./argocd login "$HOST" --username "$ARGOCD_USERNAME" --password "$ARGOCD_PASSWORD" --insecure
            ./argocd app sync moyeorak-root --prune --force --grpc-web

      - name: Cleanup local images
        run: docker image prune -af || true

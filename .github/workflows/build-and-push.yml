name: Build Auth image and push to ECR (push latest + sha)

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_IMAGE_NAME: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com/auth-service
  GRADLE_VERSION: 7.6

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Print repo files (debug)
        run: |
          echo "PWD=$(pwd)"
          ls -la
          ls -la gradle || true
          ls -la gradle/wrapper || true
          cat .dockerignore || true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install pinned Gradle (non-interactive) and expose to PATH
        run: |
          set -euo pipefail
          echo "Installing Gradle ${GRADLE_VERSION} to /opt (non-interactive)"
          sudo apt-get update -y
          sudo apt-get install -y curl unzip jq
          DIST="gradle-${GRADLE_VERSION}-bin.zip"
          URL="https://services.gradle.org/distributions/${DIST}"
          wget -q "$URL" -O /tmp/gradle.zip
          sudo unzip -o -q /tmp/gradle.zip -d /opt
          sudo ln -sfn "/opt/gradle-${GRADLE_VERSION}" /opt/gradle
          echo "/opt/gradle/bin" >> $GITHUB_PATH
          echo "Gradle installed: $(/opt/gradle/bin/gradle -v | head -n 1)"

      - name: (optional) Generate gradle wrapper using installed Gradle if missing
        run: |
          set -euo pipefail
          if [ -f gradle/wrapper/gradle-wrapper.jar ]; then
            echo "gradle-wrapper.jar present, skipping wrapper generation"
            ls -la gradle/wrapper || true
          else
            echo "gradle-wrapper.jar missing -> generating wrapper (using installed gradle ${GRADLE_VERSION})"
            /opt/gradle/bin/gradle wrapper || true
            ls -la gradle/wrapper || true
          fi

      - name: Build JAR on runner using pinned Gradle (no ./gradlew to avoid downloading Gradle 9)
        run: |
          set -euo pipefail
          echo "Building with installed Gradle (version from /opt/gradle/bin)"
          /opt/gradle/bin/gradle --no-daemon clean bootJar -x test --warning-mode all
          echo "Artifacts:"
          ls -la build/libs || true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build Docker image and push tags (uses prebuilt JAR)
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          SHORT=${SHORT_SHA::7}
          LATEST_TAG=${ECR_IMAGE_NAME}:latest
          SHA_TAG=${ECR_IMAGE_NAME}:${SHORT}
          echo "Build image -> ${SHA_TAG} and ${LATEST_TAG}"
          docker build -t ${SHA_TAG} .
          docker tag ${SHA_TAG} ${LATEST_TAG}
          docker push ${SHA_TAG}
          docker push ${LATEST_TAG}
          echo "IMAGE_LATEST=${LATEST_TAG}" >> $GITHUB_ENV
          echo "IMAGE_SHA=${SHA_TAG}" >> $GITHUB_ENV

      - name: Trigger ArgoCD sync for auth (robust + diagnostics)
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
          ARGOCD_APP: auth
        run: |
          set -eu
          echo "---- ArgoCD sync: sanity checks ----"
          if [ -z "${ARGOCD_SERVER:-}" ]; then
            echo "ERROR: ARGOCD_SERVER secret is empty. Set secrets.ARGOCD_SERVER and try again."
            exit 2
          fi
          if [ -z "${ARGOCD_TOKEN:-}" ]; then
            echo "ERROR: ARGOCD_TOKEN secret is empty. Set secrets.ARGOCD_TOKEN and try again."
            exit 3
          fi

          # Build full URL safely
          if echo "${ARGOCD_SERVER}" | grep -E '^https?://' >/dev/null 2>&1; then
            ARGOCD_URL="${ARGOCD_SERVER%/}"
          else
            ARGOCD_URL="https://${ARGOCD_SERVER}"
          fi

          echo "Using ArgoCD URL: ${ARGOCD_URL}"

          # Sync POST
          SYNC_ENDPOINT="${ARGOCD_URL}/api/v1/applications/${ARGOCD_APP}/sync"
          echo "Triggering ArgoCD sync via: $SYNC_ENDPOINT"
          MAX_TRIES=5
          SLEEP_SEC=5
          OK=0

          for i in $(seq 1 $MAX_TRIES); do
            echo " -> attempt $i/$MAX_TRIES ..."
            set +e
            resp_file=$(mktemp)
            http_code=$(curl -s -k -S -o "$resp_file" -w "%{http_code}" \
              -X POST "$SYNC_ENDPOINT" \
              -H "Authorization: Bearer ${ARGOCD_TOKEN}" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              -d '{"revision":""}' --max-time 20)
            curl_exit=$?
            set -e

            if [ $curl_exit -ne 0 ]; then
              echo "curl failed (code $curl_exit). Retrying..."
              cat "$resp_file" || true
              rm -f "$resp_file"
              sleep $SLEEP_SEC
              continue
            fi

            echo "HTTP code: $http_code"
            cat "$resp_file" || true

            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
              echo "Sync request accepted."
              OK=1
              rm -f "$resp_file"
              break
            fi

            rm -f "$resp_file"
            sleep $SLEEP_SEC
          done

          if [ "$OK" -ne 1 ]; then
            echo "Failed to POST sync after ${MAX_TRIES} attempts."
            exit 5
          fi

          echo "-> Polling ArgoCD app status..."
          STATUS_URL="${ARGOCD_URL}/api/v1/applications/${ARGOCD_APP}/status"
          for i in $(seq 1 30); do
            sleep 5
            set +e
            STATUS_JSON=$(curl -s -k -S -H "Authorization: Bearer ${ARGOCD_TOKEN}" "$STATUS_URL" --max-time 10)
            curl_exit=$?
            set -e
            if [ $curl_exit -ne 0 ]; then
              echo "Status request failed, retrying..."
              continue
            fi
            CUR_STATUS=$(echo "$STATUS_JSON" | jq -r '.status.operationState.phase // .status.sync.status // empty')
            echo "ArgoCD status: $CUR_STATUS"
            if [ "$CUR_STATUS" = "Succeeded" ] || [ "$CUR_STATUS" = "Synced" ]; then
              echo "ArgoCD sync succeeded."
              exit 0
            fi
            if [ "$CUR_STATUS" = "Failed" ] || [ "$CUR_STATUS" = "Error" ]; then
              echo "ArgoCD sync failed."
              echo "$STATUS_JSON" | jq .
              exit 6
            fi
          done

          echo "Sync timed out."
          echo "$STATUS_JSON" | jq .
          exit 7


      - name: Cleanup local images
        run: docker image prune -af || true
#.